extends layout

block content
  header.w3-container(style='padding-top:22px')
    h1.w3-left #{choralInfo.name}
    h5.w3-right
      select#timeFrame.form-control(name='timeframe' onchange='window.location.href = "?timeFrame=" + this.value')
        option(value=600) 10 min
        option(value=3600) 1 hour
        option(value=86400) 1 day
        option(value=604800) 1 week

  .w3-container
    p ID: #{choralInfo.choralId}

  .w3-row-padding.w3-margin-bottom
    ul.nav.nav-tabs.graph-tabs
      - for( var i = 0; i < tabs.length; i++ )
        - active = (i === 0 ? 'active' : '')
        li(class=active)
          a(data-toggle="tab" href="#"+tabs[i] )= tabs[i]

    if errorMsg
      .choral-view-error
        .choral-view-error-msg ERROR: #{errorMsg}
    div.tab-content
      - for( var i = 0; i < tabs.length; i++ )
        - active = (i === 0 ? 'active in' : '')
        div.tab-pane.fade(class=active id= tabs[i])
          div.choral-chart.epoch.category10(id= "areaChart"+tabs[i] style="width: 900px; height: 200px")

    div.child-area(style="position: relative; top: 210px;")
      - if( !(Object.keys(childData).length === 0 && childData.constructor === Object) )
        h3.child-area-head Children
        each child in childData
          div.child-card(onclick="location.href='/chorals/"+child.choralId+"?timeFrame=" + timeFrame + "';")
            h4.child-card-header= child.name
            div.child-card-body
              - var device_data = JSON.parse(child.device_data);
              - for( var entry in device_data )
                - var data_value = typeof(device_data[entry]) == "string" ? device_data[entry].subString(0, 5) : device_data[entry].toFixed(5)
                - if( !isNaN(parseFloat(data_value)) && isFinite(data_value) )
                  h5.child-card-body-label= entry
                  h5.child-card-body-data(id=child.choralId class=entry)= data_value

  script.
    document.addEventListener("DOMContentLoaded", function(event) {
      var childData = !{JSON.stringify(childData)}
      var tabTitles = !{JSON.stringify(tabs)};
      var past = !{JSON.stringify(pastData)};
      var choralInfo = !{JSON.stringify(choralInfo)};
      var timeFrame = !{JSON.stringify(timeFrame)};
      var sampleRate = choralInfo.sampleRate;
      var chartsData = {};
      window.charts = {};

      var options = document.getElementById('timeFrame').options;
      for(var i = 0; i < options.length; i++){
        if(options[i].value == timeFrame){
          options[i].selected = true;
        }
      }

      for( var i = 0; i < tabTitles.length; i++ ) {
        chartsData[tabTitles[i]] = [
          {
            label: tabTitles[i],
            values: past[tabTitles[i]]
          }
        ];
        var windowSize = timeFrame/sampleRate;
        window.charts[tabTitles[i]] = $('#areaChart'+tabTitles[i]).epoch({
          type: 'time.area',
          data: chartsData[tabTitles[i]],
          axes: ['left','bottom','right'],
          historySize: windowSize,
          windowSize: windowSize,
          //1 tick every X data points
          // should be windowsize/(#ticks we want)
          tickFormats: { bottom: function(d) {
              var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
              var date = new Date(d*1000);
              var date_month = date.getMonth() + 1;
              var date_day = date.getDate();
              var date_hour = date.getHours();
              var ampm = date_hour < 12 ? "am" : "pm";
              date_hour = date.getHours() < 12 ? date_hour : date_hour % 12;
              if (date_hour == 0) date_hour = 12;
              var date_minute = date.getMinutes();
              if (date_minute < 10) date_minute = "0" + date_minute;
              return months[date_month] + ' ' + date_day + ' ' + date_hour + ':' + date_minute + ampm;
            }
          },
          ticks: { time: windowSize/5 },
        });
      }

      var socket = io.connect('//'+document.location.hostname+':'+document.location.port);
      socket.on('chartData', function (jsonString) {
        var data = JSON.parse(jsonString);
        if(childData.hasOwnProperty(data.device_id)) {
          var device_data = data.device_data;
          for( var key in device_data ) {
            var data_value = typeof(device_data[key]) == "string" ? device_data[key].subString(0, 5) : device_data[key].toFixed(5)
            if( !isNaN(parseFloat(data_value)) && isFinite(data_value) ) {
              $("#"+data.device_id+"."+key).text(data_value);
            }
          }
        } else {
          for( var key in data.device_data ) {
            if( window.charts.hasOwnProperty(key) ) {
              window.charts[key].push([{
                time: data.device_timestamp/1000,
                y: data.device_data[key]
              }]);
            }
          }
        }
      });
      socket.emit('subscribeToID', { choralId: '#{parentChoralId}' });
      for(var id in childData) {
        if(childData.hasOwnProperty(id)) {
          socket.emit('subscribeToID', { choralId: id });
        }
      }
    });
